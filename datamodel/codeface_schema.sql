-- MySQL Script generated by MySQL Workbench
-- dom 12 ago 2018 22:14:22 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema codeface
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `codeface` ;

-- -----------------------------------------------------
-- Schema codeface
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `codeface` DEFAULT CHARACTER SET utf8 ;
USE `codeface` ;

-- -----------------------------------------------------
-- Table `codeface`.`project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`project` ;

CREATE TABLE IF NOT EXISTS `codeface`.`project` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `name` VARCHAR(255) NOT NULL COMMENT '',
  `analysisMethod` VARCHAR(45) NOT NULL COMMENT '',
  `analysisTime` DATETIME NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB;

CREATE UNIQUE INDEX `name_UNIQUE` ON `codeface`.`project` (`name` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`person` ;

CREATE TABLE IF NOT EXISTS `codeface`.`person` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `name` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_general_ci' NULL DEFAULT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `email1` VARCHAR(255) NOT NULL COMMENT '',
  `email2` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `email3` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `email4` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `email5` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `person_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `person_projectId_idx` ON `codeface`.`person` (`projectId` ASC)  COMMENT '';

CREATE UNIQUE INDEX `person_email_project_idx` ON `codeface`.`person` (`projectId` ASC, `email1` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`issue`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `externalId` VARCHAR(45) NOT NULL COMMENT '',
  `url` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `issueType` VARCHAR(45) NOT NULL COMMENT '',
  `title` VARCHAR(255) NOT NULL COMMENT '',
  `description` LONGTEXT NULL DEFAULT NULL COMMENT '',
  `creationDate` DATETIME NOT NULL COMMENT '',
  `createdBy` BIGINT NOT NULL COMMENT '',
  `priority` VARCHAR(45) NOT NULL COMMENT '',
  `severity` VARCHAR(45) NOT NULL COMMENT '',
  `version` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `startDate` DATE NULL DEFAULT NULL COMMENT '',
  `dueDate` DATE NULL DEFAULT NULL COMMENT '',
  `assignedTo` BIGINT NULL DEFAULT NULL COMMENT '',
  `estimatedTime` DECIMAL NULL DEFAULT NULL COMMENT '',
  `spentTime` DECIMAL NOT NULL COMMENT '',
  `progress` INT NOT NULL COMMENT '',
  `status` VARCHAR(45) NOT NULL COMMENT '',
  `resolution` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `category` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `issue_createdBy`
    FOREIGN KEY (`createdBy`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `issue_assignedTo`
    FOREIGN KEY (`assignedTo`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `issue_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `issue_createdBy_idx` ON `codeface`.`issue` (`createdBy` ASC)  COMMENT '';

CREATE INDEX `issue_assignedTo_idx` ON `codeface`.`issue` (`assignedTo` ASC)  COMMENT '';

CREATE INDEX `issue_projectId_idx` ON `codeface`.`issue` (`projectId` ASC)  COMMENT '';

CREATE UNIQUE INDEX `externalId_UNIQUE` ON `codeface`.`issue` (`externalId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`release_timeline`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`release_timeline` ;

CREATE TABLE IF NOT EXISTS `codeface`.`release_timeline` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `type` VARCHAR(45) NOT NULL COMMENT '',
  `tag` VARCHAR(45) NOT NULL COMMENT '',
  `date` DATETIME NULL DEFAULT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `release_project_ref`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `release_project_ref_idx` ON `codeface`.`release_timeline` (`projectId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`release_range`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`release_range` ;

CREATE TABLE IF NOT EXISTS `codeface`.`release_range` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `releaseStartId` BIGINT NOT NULL COMMENT '',
  `releaseEndId` BIGINT NOT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `releaseRCStartId` BIGINT NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `releaseRange_releaseStartId`
    FOREIGN KEY (`releaseStartId`)
    REFERENCES `codeface`.`release_timeline` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `releaseRange_releaseEndId`
    FOREIGN KEY (`releaseEndId`)
    REFERENCES `codeface`.`release_timeline` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `releaseRange_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `releaseRange_RCStartId`
    FOREIGN KEY (`releaseRCStartId`)
    REFERENCES `codeface`.`release_timeline` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `releaseRange_releaseStartId_idx` ON `codeface`.`release_range` (`releaseStartId` ASC)  COMMENT '';

CREATE INDEX `releaseRange_releaseEndId_idx` ON `codeface`.`release_range` (`releaseEndId` ASC)  COMMENT '';

CREATE INDEX `releaseRange_projectId_idx` ON `codeface`.`release_range` (`projectId` ASC)  COMMENT '';

CREATE INDEX `releaseRange_RCStartId_idx` ON `codeface`.`release_range` (`releaseRCStartId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`mailing_list`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`mailing_list` ;

CREATE TABLE IF NOT EXISTS `codeface`.`mailing_list` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `name` VARCHAR(128) NOT NULL COMMENT '',
  `description` VARCHAR(255) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `mailing_lists_projectid`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `mailing_lists_projectid_idx` ON `codeface`.`mailing_list` (`projectId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`mail_thread`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`mail_thread` ;

CREATE TABLE IF NOT EXISTS `codeface`.`mail_thread` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `subject` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `createdBy` BIGINT NULL DEFAULT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `mlId` BIGINT NOT NULL COMMENT '',
  `mailThreadId` BIGINT NOT NULL COMMENT '',
  `creationDate` DATETIME NULL DEFAULT NULL COMMENT '',
  `numberOfAuthors` INT NOT NULL COMMENT '',
  `numberOfMessages` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `thread_createdBy`
    FOREIGN KEY (`createdBy`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `thread_release_range_key`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `thread_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `thread_mlId`
    FOREIGN KEY (`mlId`)
    REFERENCES `codeface`.`mailing_list` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `mail_createdBy_idx` ON `codeface`.`mail_thread` (`createdBy` ASC)  COMMENT '';

CREATE INDEX `mail_projectId_idx` ON `codeface`.`mail_thread` (`projectId` ASC)  COMMENT '';

CREATE INDEX `mail_release_range_key_idx` ON `codeface`.`mail_thread` (`releaseRangeId` ASC)  COMMENT '';

CREATE INDEX `mail_mlId_idx` ON `codeface`.`mail_thread` (`mlId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`thread_responses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`thread_responses` ;

CREATE TABLE IF NOT EXISTS `codeface`.`thread_responses` (
  `who` BIGINT NOT NULL COMMENT '',
  `mailThreadId` BIGINT NOT NULL COMMENT '',
  `mailDate` DATETIME NULL DEFAULT NULL COMMENT '',
  CONSTRAINT `thread_responses_who`
    FOREIGN KEY (`who`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `mailThreadId`
    FOREIGN KEY (`mailThreadId`)
    REFERENCES `codeface`.`mail_thread` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `thread_responses_who_idx` ON `codeface`.`thread_responses` (`who` ASC)  COMMENT '';

CREATE INDEX `mailThreadId_idx` ON `codeface`.`thread_responses` (`mailThreadId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`watcher_list`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`watcher_list` ;

CREATE TABLE IF NOT EXISTS `codeface`.`watcher_list` (
  `issueId` BIGINT NOT NULL COMMENT '',
  `who` BIGINT NOT NULL COMMENT '',
  CONSTRAINT `watcher_list_issue`
    FOREIGN KEY (`issueId`)
    REFERENCES `codeface`.`issue` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `watcher_list_who`
    FOREIGN KEY (`who`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `watcher_list_issue_idx` ON `codeface`.`watcher_list` (`issueId` ASC)  COMMENT '';

CREATE INDEX `watcher_list_who_idx` ON `codeface`.`watcher_list` (`who` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`commit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`commit` ;

CREATE TABLE IF NOT EXISTS `codeface`.`commit` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `commitHash` VARCHAR(255) NOT NULL COMMENT '',
  `commitDate` DATETIME NOT NULL COMMENT '',
  `authorDate` DATETIME NOT NULL COMMENT '',
  `authorTimeOffset` INT NULL DEFAULT NULL COMMENT '',
  `authorTimezones` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `author` BIGINT NOT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `ChangedFiles` INT NULL DEFAULT NULL COMMENT '',
  `AddedLines` INT NULL DEFAULT NULL COMMENT '',
  `DeletedLines` INT NULL DEFAULT NULL COMMENT '',
  `DiffSize` INT NULL DEFAULT NULL COMMENT '',
  `CmtMsgLines` INT NULL DEFAULT NULL COMMENT '',
  `CmtMsgBytes` INT NULL DEFAULT NULL COMMENT '',
  `NumSignedOffs` INT NULL DEFAULT NULL COMMENT '',
  `NumTags` INT NULL DEFAULT NULL COMMENT '',
  `general` INT NULL DEFAULT NULL COMMENT '',
  `TotalSubsys` INT NULL DEFAULT NULL COMMENT '',
  `Subsys` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `inRC` INT NULL DEFAULT NULL COMMENT '',
  `AuthorSubsysSimilarity` FLOAT NULL DEFAULT NULL COMMENT '',
  `AuthorTaggersSimilarity` FLOAT NULL DEFAULT NULL COMMENT '',
  `TaggersSubsysSimilarity` FLOAT NULL DEFAULT NULL COMMENT '',
  `releaseRangeId` BIGINT NULL DEFAULT NULL COMMENT '',
  `description` MEDIUMTEXT NULL COMMENT '',
  `corrective` TINYINT(1) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `commit_person`
    FOREIGN KEY (`author`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `commit_project`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `commit_release_range`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `commit_person_idx` ON `codeface`.`commit` (`author` ASC)  COMMENT '';

CREATE INDEX `commit_project_idx` ON `codeface`.`commit` (`projectId` ASC)  COMMENT '';

CREATE INDEX `commit_release_end_idx` ON `codeface`.`commit` (`releaseRangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`commit_communication`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`commit_communication` ;

CREATE TABLE IF NOT EXISTS `codeface`.`commit_communication` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `commitId` BIGINT NOT NULL COMMENT '',
  `who` BIGINT NOT NULL COMMENT '',
  `communicationType` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `commitcom_commit`
    FOREIGN KEY (`commitId`)
    REFERENCES `codeface`.`commit` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `commitcom_person`
    FOREIGN KEY (`who`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `commtcom_commit_idx` ON `codeface`.`commit_communication` (`commitId` ASC)  COMMENT '';

CREATE INDEX `commitcom_person_idx` ON `codeface`.`commit_communication` (`who` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`issue_relations`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_relations` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_relations` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `leftIssueId` BIGINT NOT NULL COMMENT '',
  `relation` VARCHAR(45) NOT NULL COMMENT '',
  `rightIssueId` BIGINT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `left_issue_relation`
    FOREIGN KEY (`leftIssueId`)
    REFERENCES `codeface`.`issue` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `right_issue_relation`
    FOREIGN KEY (`rightIssueId`)
    REFERENCES `codeface`.`issue` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `left_issue_relation_idx` ON `codeface`.`issue_relations` (`leftIssueId` ASC)  COMMENT '';

CREATE INDEX `right_issue_relation_idx` ON `codeface`.`issue_relations` (`rightIssueId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`author_commit_stats`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`author_commit_stats` ;

CREATE TABLE IF NOT EXISTS `codeface`.`author_commit_stats` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `authorId` BIGINT NOT NULL COMMENT '',
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `added` INT NULL DEFAULT NULL COMMENT '',
  `deleted` INT NULL DEFAULT NULL COMMENT '',
  `total` INT NULL DEFAULT NULL COMMENT '',
  `numcommits` INT NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `author_person_key`
    FOREIGN KEY (`authorId`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `releaseRangeId_key`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `author_person_key_idx` ON `codeface`.`author_commit_stats` (`authorId` ASC)  COMMENT '';

CREATE INDEX `releaseRangeId_key_idx` ON `codeface`.`author_commit_stats` (`releaseRangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`plots`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`plots` ;

CREATE TABLE IF NOT EXISTS `codeface`.`plots` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `name` VARCHAR(45) NOT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `releaseRangeId` BIGINT NULL DEFAULT NULL COMMENT '',
  `labelx` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `labely` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `plot_project_ref`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `plot_releaseRangeId_ref`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `plot_project_ref_idx` ON `codeface`.`plots` (`projectId` ASC)  COMMENT '';

CREATE INDEX `plot_releaseRangeId_ref_idx` ON `codeface`.`plots` (`releaseRangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`plot_bin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`plot_bin` ;

CREATE TABLE IF NOT EXISTS `codeface`.`plot_bin` (
  `plotID` BIGINT NOT NULL COMMENT '',
  `type` VARCHAR(45) NOT NULL COMMENT '',
  `data` LONGBLOB NOT NULL COMMENT '',
  CONSTRAINT `plot_bin_plot_ref`
    FOREIGN KEY (`plotID`)
    REFERENCES `codeface`.`plots` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `plot_bin_plot_ref_idx` ON `codeface`.`plot_bin` (`plotID` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`cluster`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`cluster` ;

CREATE TABLE IF NOT EXISTS `codeface`.`cluster` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `clusterNumber` INT NULL DEFAULT NULL COMMENT '',
  `clusterMethod` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `dot` BIGINT NULL DEFAULT NULL COMMENT '',
  `svg` BIGINT NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `project_cluster_ref`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `dot_plot_bin_data`
    FOREIGN KEY (`dot`)
    REFERENCES `codeface`.`plot_bin` (`plotID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `svg_plot_bin_data_ref`
    FOREIGN KEY (`svg`)
    REFERENCES `codeface`.`plot_bin` (`plotID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `cluster_releaseRange`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `project_cluster_ref_idx` ON `codeface`.`cluster` (`projectId` ASC)  COMMENT '';

CREATE INDEX `dot_plot_bin_data_idx` ON `codeface`.`cluster` (`dot` ASC)  COMMENT '';

CREATE INDEX `svg_plot_bin_data_ref_idx` ON `codeface`.`cluster` (`svg` ASC)  COMMENT '';

CREATE INDEX `cluster_releaseRange_idx` ON `codeface`.`cluster` (`releaseRangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`cluster_user_mapping`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`cluster_user_mapping` ;

CREATE TABLE IF NOT EXISTS `codeface`.`cluster_user_mapping` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `personId` BIGINT NOT NULL COMMENT '',
  `clusterId` BIGINT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `cluster_cluster_user_ref`
    FOREIGN KEY (`clusterId`)
    REFERENCES `codeface`.`cluster` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `person_cluster_user_ref`
    FOREIGN KEY (`personId`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `cluster_cluster_user_ref_idx` ON `codeface`.`cluster_user_mapping` (`clusterId` ASC)  COMMENT '';

CREATE INDEX `person_cluster_user_ref_idx` ON `codeface`.`cluster_user_mapping` (`personId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`issue_change`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_change` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_change` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `changeDate` DATETIME NOT NULL COMMENT '',
  `who` BIGINT NOT NULL COMMENT '',
  `issueId` BIGINT NOT NULL COMMENT '',
  `comment` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `issue_change_issue`
    FOREIGN KEY (`issueId`)
    REFERENCES `codeface`.`issue` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `issue_change_who`
    FOREIGN KEY (`who`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `issue_change_issue_idx` ON `codeface`.`issue_change` (`issueId` ASC)  COMMENT '';

CREATE INDEX `issue_change_who_idx` ON `codeface`.`issue_change` (`who` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`url_info`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`url_info` ;

CREATE TABLE IF NOT EXISTS `codeface`.`url_info` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `type` VARCHAR(45) NOT NULL COMMENT '',
  `url` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `url_info_project`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `url_info_project_idx` ON `codeface`.`url_info` (`projectId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`timeseries`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`timeseries` ;

CREATE TABLE IF NOT EXISTS `codeface`.`timeseries` (
  `plotId` BIGINT NOT NULL COMMENT '',
  `time` DATETIME NOT NULL COMMENT '',
  `value` DOUBLE NOT NULL COMMENT '',
  `value_scaled` DOUBLE NULL DEFAULT NULL COMMENT '',
  CONSTRAINT `plot_time_double_plot_ref`
    FOREIGN KEY (`plotId`)
    REFERENCES `codeface`.`plots` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `plot_time_double_plot_ref_idx` ON `codeface`.`timeseries` (`plotId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`freq_subjects`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`freq_subjects` ;

CREATE TABLE IF NOT EXISTS `codeface`.`freq_subjects` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `mlId` BIGINT NOT NULL COMMENT '',
  `subject` TEXT NOT NULL COMMENT '',
  `count` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `freq_subects_project_ref`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `freq_subjects_release_range_ref`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `freq_subjects_mlId_ref`
    FOREIGN KEY (`mlId`)
    REFERENCES `codeface`.`mailing_list` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `freq_subects_project_ref_idx` ON `codeface`.`freq_subjects` (`projectId` ASC)  COMMENT '';

CREATE INDEX `freq_subjects_release_range_ref_idx` ON `codeface`.`freq_subjects` (`releaseRangeId` ASC)  COMMENT '';

CREATE INDEX `freq_subjects_mlId_ref_idx` ON `codeface`.`freq_subjects` (`mlId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`thread_density`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`thread_density` ;

CREATE TABLE IF NOT EXISTS `codeface`.`thread_density` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `num` DOUBLE NOT NULL COMMENT '',
  `density` DOUBLE NOT NULL COMMENT '',
  `type` VARCHAR(45) NOT NULL COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `project_thread_density_ref`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `project_thread_density_ref_idx` ON `codeface`.`thread_density` (`projectId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`pagerank`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`pagerank` ;

CREATE TABLE IF NOT EXISTS `codeface`.`pagerank` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `technique` TINYINT NOT NULL COMMENT '',
  `name` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `pagerank_releaserange`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `pagerank_releaserange_idx` ON `codeface`.`pagerank` (`releaseRangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`pagerank_matrix`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`pagerank_matrix` ;

CREATE TABLE IF NOT EXISTS `codeface`.`pagerank_matrix` (
  `pageRankId` BIGINT NOT NULL COMMENT '',
  `personId` BIGINT NOT NULL COMMENT '',
  `rankValue` DOUBLE NOT NULL COMMENT '',
  PRIMARY KEY (`pageRankId`, `personId`)  COMMENT '',
  CONSTRAINT `pagerankMatrix_pagerank`
    FOREIGN KEY (`pageRankId`)
    REFERENCES `codeface`.`pagerank` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `pagerankMatrix_person`
    FOREIGN KEY (`personId`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `pagerankMatrix_pagerank_idx` ON `codeface`.`pagerank_matrix` (`pageRankId` ASC)  COMMENT '';

CREATE INDEX `pagerankMatrix_person_idx` ON `codeface`.`pagerank_matrix` (`personId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`edgelist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`edgelist` ;

CREATE TABLE IF NOT EXISTS `codeface`.`edgelist` (
  `clusterId` BIGINT NOT NULL COMMENT '',
  `fromId` BIGINT NOT NULL COMMENT '',
  `toId` BIGINT NOT NULL COMMENT '',
  `weight` DOUBLE NOT NULL COMMENT '',
  CONSTRAINT `edgelist_person_from`
    FOREIGN KEY (`fromId`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `edgeList_person_to`
    FOREIGN KEY (`toId`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `edgeList_cluster`
    FOREIGN KEY (`clusterId`)
    REFERENCES `codeface`.`cluster` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `edgelist_person_from_idx` ON `codeface`.`edgelist` (`fromId` ASC)  COMMENT '';

CREATE INDEX `edgelist_person_to_idx` ON `codeface`.`edgelist` (`toId` ASC)  COMMENT '';

CREATE INDEX `edgeList_cluster_idx` ON `codeface`.`edgelist` (`clusterId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`twomode_edgelist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`twomode_edgelist` ;

CREATE TABLE IF NOT EXISTS `codeface`.`twomode_edgelist` (
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `source` CHAR(7) NOT NULL COMMENT '',
  `mlId` BIGINT NOT NULL COMMENT '',
  `fromVert` BIGINT NOT NULL COMMENT '',
  `toVert` VARCHAR(255) NOT NULL COMMENT '',
  `weight` DOUBLE NOT NULL COMMENT '',
  CONSTRAINT `twomode_edgelist_releaseRange`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `twomode_edgelist_person`
    FOREIGN KEY (`fromVert`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `twomode_edgelist_mlId`
    FOREIGN KEY (`mlId`)
    REFERENCES `codeface`.`mailing_list` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `twomode_edgelist_releaseRange_idx` ON `codeface`.`twomode_edgelist` (`releaseRangeId` ASC)  COMMENT '';

CREATE INDEX `twomode_edgelist_person_idx` ON `codeface`.`twomode_edgelist` (`fromVert` ASC)  COMMENT '';

CREATE INDEX `twomode_edgelist_mlId_idx` ON `codeface`.`twomode_edgelist` (`mlId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`twomode_vertices`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`twomode_vertices` ;

CREATE TABLE IF NOT EXISTS `codeface`.`twomode_vertices` (
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `source` CHAR(7) NOT NULL COMMENT '',
  `mlId` BIGINT NOT NULL COMMENT '',
  `name` VARCHAR(255) NOT NULL COMMENT '',
  `degree` DOUBLE NOT NULL COMMENT '',
  `type` SMALLINT NOT NULL COMMENT '',
  CONSTRAINT `twomode_vertices_releaseRange`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `twomode_vertices_mlId`
    FOREIGN KEY (`mlId`)
    REFERENCES `codeface`.`mailing_list` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `twomode_vertices_releaseRange_idx` ON `codeface`.`twomode_vertices` (`releaseRangeId` ASC)  COMMENT '';

CREATE INDEX `twomode_vertices_mlId_idx` ON `codeface`.`twomode_vertices` (`mlId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`initiate_response`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`initiate_response` ;

CREATE TABLE IF NOT EXISTS `codeface`.`initiate_response` (
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `mlId` BIGINT NOT NULL COMMENT '',
  `personId` BIGINT NOT NULL COMMENT '',
  `source` TINYINT NOT NULL COMMENT '',
  `responses` INT NULL DEFAULT NULL COMMENT '',
  `initiations` INT NULL DEFAULT NULL COMMENT '',
  `responses_received` INT NULL DEFAULT NULL COMMENT '',
  `deg` DOUBLE NULL DEFAULT NULL COMMENT '',
  CONSTRAINT `initiate_response_releaseRange`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `initiate_response_person`
    FOREIGN KEY (`personId`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `initiate_response_mlId`
    FOREIGN KEY (`mlId`)
    REFERENCES `codeface`.`mailing_list` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `initiate_response_releaseRange_idx` ON `codeface`.`initiate_response` (`releaseRangeId` ASC)  COMMENT '';

CREATE INDEX `initiate_response_person_idx` ON `codeface`.`initiate_response` (`personId` ASC)  COMMENT '';

CREATE INDEX `initiate_response_mlId_idx` ON `codeface`.`initiate_response` (`mlId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`per_cluster_statistics`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`per_cluster_statistics` ;

CREATE TABLE IF NOT EXISTS `codeface`.`per_cluster_statistics` (
  `projectId` BIGINT NOT NULL COMMENT '',
  `releaseRangeId` BIGINT NOT NULL COMMENT '',
  `clusterId` BIGINT NOT NULL COMMENT '',
  `technique` TINYINT NOT NULL COMMENT '',
  `num_members` INT(11) NOT NULL COMMENT '',
  `added` INT(11) NOT NULL COMMENT '',
  `deleted` INT(11) NOT NULL COMMENT '',
  `total` INT(11) NOT NULL COMMENT '',
  `numcommits` INT(11) NOT NULL COMMENT '',
  `prank_avg` DOUBLE NOT NULL COMMENT '',
  CONSTRAINT `per_cluster_statistics_projectId_ref`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `per_cluster_statistics_rr_ref`
    FOREIGN KEY (`releaseRangeId`)
    REFERENCES `codeface`.`release_range` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_per_cluster_statistics_1_idx` ON `codeface`.`per_cluster_statistics` (`projectId` ASC)  COMMENT '';

CREATE INDEX `fk_per_cluster_statistics_1_idx1` ON `codeface`.`per_cluster_statistics` (`releaseRangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`sloccount_ts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`sloccount_ts` ;

CREATE TABLE IF NOT EXISTS `codeface`.`sloccount_ts` (
  `plotId` BIGINT NOT NULL COMMENT '',
  `time` DATETIME NOT NULL COMMENT '',
  `person_months` DOUBLE NOT NULL COMMENT '',
  `total_cost` DOUBLE NOT NULL COMMENT '',
  `schedule_months` DOUBLE NOT NULL COMMENT '',
  `avg_devel` DOUBLE NOT NULL COMMENT '',
  CONSTRAINT `sloccount_ts_plotid_ref`
    FOREIGN KEY (`plotId`)
    REFERENCES `codeface`.`plots` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `time_UNIQUE` ON `codeface`.`sloccount_ts` (`time` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`understand_raw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`understand_raw` ;

CREATE TABLE IF NOT EXISTS `codeface`.`understand_raw` (
  `plotId` BIGINT NOT NULL COMMENT '',
  `time` DATETIME NOT NULL COMMENT '',
  `kind` VARCHAR(30) NOT NULL COMMENT '',
  `name` VARCHAR(45) NULL COMMENT '',
  `variable` VARCHAR(45) NOT NULL COMMENT '',
  `value` DOUBLE NOT NULL COMMENT '',
  CONSTRAINT `understand_raw_id_ref`
    FOREIGN KEY (`plotId`)
    REFERENCES `codeface`.`plots` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `understand_raw_kind_idx` ON `codeface`.`understand_raw` (`kind` ASC)  COMMENT '';

CREATE INDEX `understand_raw_plotId_idx` ON `codeface`.`understand_raw` (`plotId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`commit_dependency`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`commit_dependency` ;

CREATE TABLE IF NOT EXISTS `codeface`.`commit_dependency` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `commitId` BIGINT NOT NULL COMMENT '',
  `file` VARCHAR(255) NOT NULL COMMENT '',
  `entityId` TEXT NOT NULL COMMENT '',
  `entityType` VARCHAR(100) NOT NULL COMMENT '',
  `size` INT NULL COMMENT '',
  `impl` MEDIUMTEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `fk_commit_dependency`
    FOREIGN KEY (`commitId`)
    REFERENCES `codeface`.`commit` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_1_idx` ON `codeface`.`commit_dependency` (`commitId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`mail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`mail` ;

CREATE TABLE IF NOT EXISTS `codeface`.`mail` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '',
  `projectId` BIGINT NOT NULL COMMENT '',
  `threadId` BIGINT NOT NULL COMMENT '',
  `mlId` BIGINT NOT NULL COMMENT '',
  `author` BIGINT NOT NULL COMMENT '',
  `subject` VARCHAR(255) NULL DEFAULT NULL COMMENT '',
  `creationDate` DATETIME NOT NULL COMMENT '',
  `creationDateOffset` INT(11) NOT NULL COMMENT '',
  `messageId` VARCHAR(255) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `mail_author`
    FOREIGN KEY (`author`)
    REFERENCES `codeface`.`person` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `mail_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `mail_mlId`
    FOREIGN KEY (`mlId`)
    REFERENCES `codeface`.`mailing_list` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `mail_author_idx` ON `codeface`.`mail` (`author` ASC)  COMMENT '';

CREATE INDEX `mail_projectId_idx` ON `codeface`.`mail` (`projectId` ASC)  COMMENT '';

CREATE INDEX `mail_mlId_idx` ON `codeface`.`mail` (`mlId` ASC)  COMMENT '';

CREATE INDEX `mail_comp1_idx` ON `codeface`.`mail` (`mlId` ASC, `projectId` ASC, `creationDate` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`field_change`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`field_change` ;

CREATE TABLE IF NOT EXISTS `codeface`.`field_change` (
  `id` BIGINT NOT NULL COMMENT '',
  `field` VARCHAR(45) NOT NULL COMMENT '',
  `oldValue` LONGTEXT NULL DEFAULT NULL COMMENT '',
  `newValue` LONGTEXT NULL DEFAULT NULL COMMENT '',
  `issueChangeId` BIGINT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `field_change_issue_change`
    FOREIGN KEY (`issueChangeId`)
    REFERENCES `codeface`.`issue_change` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `field_change_issue_change_idx` ON `codeface`.`field_change` (`issueChangeId` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `codeface`.`issue_commit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_commit` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_commit` (
  `issueId` BIGINT NOT NULL COMMENT '',
  `commitId` BIGINT NOT NULL COMMENT '',
  CONSTRAINT `issue_commit_issue`
    FOREIGN KEY (`issueId`)
    REFERENCES `codeface`.`issue` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `issue_commit_commit`
    FOREIGN KEY (`commitId`)
    REFERENCES `codeface`.`commit` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `issue_commit_issue_idx` ON `codeface`.`issue_commit` (`issueId` ASC)  COMMENT '';

CREATE INDEX `issue_commit_commit_idx` ON `codeface`.`issue_commit` (`commitId` ASC)  COMMENT '';

USE `codeface` ;

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`revisions_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`revisions_view` (`projectId` INT, `releaseRangeID` INT, `date_start` INT, `date_end` INT, `date_rc_start` INT, `tag` INT, `cycle` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`author_commit_stats_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`author_commit_stats_view` (`Name` INT, `ID` INT, `releaseRangeId` INT, `added` INT, `deleted` INT, `total` INT, `numcommits` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`per_person_cluster_statistics_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`per_person_cluster_statistics_view` (`'projectId'` INT, `'releaseRangeId'` INT, `'clusterId'` INT, `'personId'` INT, `'technique'` INT, `'rankValue'` INT, `'added'` INT, `'deleted'` INT, `'total'` INT, `'numcommits'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`cluster_user_pagerank_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`cluster_user_pagerank_view` (`id` INT, `personId` INT, `clusterId` INT, `technique` INT, `rankValue` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`per_cluster_statistics_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`per_cluster_statistics_view` (`'projectId'` INT, `'releaseRangeId'` INT, `'clusterId'` INT, `technique` INT, `'num_members'` INT, `'added'` INT, `'deleted'` INT, `'total'` INT, `'numcommits'` INT, `'prank_avg'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`pagerank_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`pagerank_view` (`pageRankId` INT, `authorId` INT, `name` INT, `rankValue` INT);

-- -----------------------------------------------------
-- procedure update_per_cluster_statistics
-- -----------------------------------------------------

USE `codeface`;
DROP procedure IF EXISTS `codeface`.`update_per_cluster_statistics`;

DELIMITER $$
USE `codeface`$$
CREATE PROCEDURE `codeface`.`update_per_cluster_statistics` ()
BEGIN
	TRUNCATE per_cluster_statistics;
	INSERT INTO per_cluster_statistics SELECT * FROM per_cluster_statistics_view;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `codeface`.`revisions_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`revisions_view` ;
DROP TABLE IF EXISTS `codeface`.`revisions_view`;
USE `codeface`;
CREATE  OR REPLACE VIEW `codeface`.`revisions_view` AS
SELECT 
	p.id as projectId,
	rr.id as releaseRangeID,
	rt_s.date as date_start, 
	rt_e.date as date_end, 
	rt_rs.date as date_rc_start, 
	rt_s.tag as tag, 
	concat(rt_s.tag,'-',rt_e.tag) as cycle
FROM 
	release_range rr JOIN release_timeline rt_s ON rr.releaseStartId = rt_s.id
	JOIN release_timeline rt_e ON rr.releaseEndId = rt_e.id
	LEFT JOIN release_timeline rt_rs ON rr.releaseRCStartId = rt_rs.id
	JOIN project p ON rr.projectId = p.id
order by rr.id asc;

-- -----------------------------------------------------
-- View `codeface`.`author_commit_stats_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`author_commit_stats_view` ;
DROP TABLE IF EXISTS `codeface`.`author_commit_stats_view`;
USE `codeface`;
CREATE  OR REPLACE VIEW `codeface`.`author_commit_stats_view` AS
SELECT 
	p.name as Name, 
	s.authorId as ID, 
	s.releaseRangeId, 
	sum(s.added) as added, 
	sum(s.deleted) as deleted, 
	sum(s.total) as total, 
	sum(s.numcommits) as numcommits
FROM author_commit_stats s join person p on p.id = s.authorId
WHERE 
s.authorId IN 
	(	select distinct(authorId) 
		FROM author_commit_stats)
GROUP BY s.authorId, p.name, s.releaseRangeId;

-- -----------------------------------------------------
-- View `codeface`.`per_person_cluster_statistics_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`per_person_cluster_statistics_view` ;
DROP TABLE IF EXISTS `codeface`.`per_person_cluster_statistics_view`;
USE `codeface`;
CREATE  OR REPLACE VIEW `codeface`.`per_person_cluster_statistics_view` AS
select 
    rr.projectId as 'projectId',
    rr.id as 'releaseRangeId',
    c.id as 'clusterId',
    p.id as 'personId',
	pr.technique as 'technique',
	prm.rankValue as 'rankValue',
    sum(acs.added) as 'added',
    sum(acs.deleted) as 'deleted',
    sum(acs.total) as 'total',
    sum(acs.numcommits) as 'numcommits'
from release_range rr INNER JOIN (cluster c, cluster_user_mapping cum, person p, author_commit_stats acs, pagerank pr, pagerank_matrix prm)
	ON (rr.id = c.releaseRangeId
		AND c.id = cum.clusterId
        AND cum.personId = p.id
		AND rr.id = acs.releaseRangeId
		AND p.id = acs.authorId
		AND rr.id = pr.releaseRangeID
		AND pr.id = prm.pageRankId
		AND p.id = prm.personId)
group by rr.projectId , rr.id , c.id , p.id, pr.technique, prm.rankValue;

-- -----------------------------------------------------
-- View `codeface`.`cluster_user_pagerank_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`cluster_user_pagerank_view` ;
DROP TABLE IF EXISTS `codeface`.`cluster_user_pagerank_view`;
USE `codeface`;
CREATE  OR REPLACE VIEW `codeface`.`cluster_user_pagerank_view` AS
SELECT
	cum.id, 
	cum.personId,
	cum.clusterId AS clusterId,
	pr.technique,
	prm.rankValue
FROM
	cluster_user_mapping cum
	INNER JOIN (cluster c, pagerank_matrix prm, pagerank pr)
	ON (cum.personId = prm.personId AND
	    cum.clusterId = c.id AND
	    prm.pageRankId = pr.id AND
	    c.releaseRangeId = pr.releaseRangeId);

-- -----------------------------------------------------
-- View `codeface`.`per_cluster_statistics_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`per_cluster_statistics_view` ;
DROP TABLE IF EXISTS `codeface`.`per_cluster_statistics_view`;
USE `codeface`;
CREATE  OR REPLACE VIEW `codeface`.`per_cluster_statistics_view` AS
select 
    rr.projectId as 'projectId',
    rr.id as 'releaseRangeId',
    c.id as 'clusterId',
	pr.technique,
    count(p.id) as 'num_members',
    sum(acs.added) as 'added',
    sum(acs.deleted) as 'deleted',
    sum(acs.total) as 'total',
    sum(acs.numcommits) as 'numcommits',
	avg(prm.rankValue) as 'prank_avg'
from release_range rr INNER JOIN (cluster c, cluster_user_mapping cum, person p, author_commit_stats acs, pagerank pr, pagerank_matrix prm)
	ON (rr.id = c.releaseRangeId
		AND c.id = cum.clusterId
        AND cum.personId = p.id
		AND rr.id = acs.releaseRangeId
		AND p.id = acs.authorId
		AND rr.id = pr.releaseRangeID
		AND pr.id = prm.pageRankId
		AND p.id = prm.personId)
group by rr.projectId , rr.id , c.id, pr.technique;

-- -----------------------------------------------------
-- View `codeface`.`pagerank_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`pagerank_view` ;
DROP TABLE IF EXISTS `codeface`.`pagerank_view`;
USE `codeface`;
CREATE  OR REPLACE VIEW `codeface`.`pagerank_view` AS
SELECT
	prm.pageRankId as pageRankId,
	p.id as authorId,
	p.name AS name,
        prm.rankValue AS rankValue
FROM pagerank_matrix prm JOIN person p ON p.id=prm.personId;

-- -----------------------------------------------------
-- Table `codeface`.`issue_project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_project` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_project` (
  `projectId` BIGINT NOT NULL AUTO_INCREMENT,
  `url` VARCHAR(255) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `priorityField1` VARCHAR(45) NULL,
  `priorityField2` VARCHAR(45) NULL,
  PRIMARY KEY (`projectId`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `name_UNIQUE` ON `codeface`.`issue_project` (`name` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_developer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_developer` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_developer` (
  `name` VARCHAR(255) NOT NULL,
  `projectId` BIGINT NOT NULL,
  `developerId` BIGINT NOT NULL,
  `realName` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`name`, `projectId`),
  CONSTRAINT `developer_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`issue_project` (`projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `developer_project_idx` ON `codeface`.`issue_developer` (`projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_data` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_data` (
  `issueId` BIGINT NOT NULL,
  `projectId` BIGINT NOT NULL,
  `summary` VARCHAR(255) NOT NULL,
  `component` VARCHAR(255) NOT NULL,
  `creationTime` DATETIME NOT NULL,
  `creator` VARCHAR(255) NOT NULL,
  `assignedTo` VARCHAR(255) NULL DEFAULT NULL,
  `spentTime` BIGINT NULL,
  `priority` VARCHAR(45) NOT NULL,
  `priorityValue` INT NOT NULL,
  `severity` VARCHAR(45) NOT NULL,
  `severityValue` INT NOT NULL,
  `status` VARCHAR(45) NOT NULL,
  `resolution` VARCHAR(45) NULL DEFAULT NULL,
  `isOpen` TINYINT(1) NOT NULL,
  `votes` INT NOT NULL,
  `commentCount` INT NULL,
  `keywords` LONGTEXT NULL,
  `lastResolved` DATETIME NULL,
  `realAssignee` VARCHAR(255) NULL,
  PRIMARY KEY (`issueId`, `projectId`),
  CONSTRAINT `issue_projectId_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`issue_project` (`projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `issue_assignedTo_developerId`
    FOREIGN KEY (`assignedTo` , `projectId`)
    REFERENCES `codeface`.`issue_developer` (`name` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `issue_projectId_projectId_idx` ON `codeface`.`issue_data` (`projectId` ASC);

CREATE INDEX `issue_dev_idx` ON `codeface`.`issue_data` (`assignedTo` ASC, `projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_cclist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_cclist` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_cclist` (
  `issueId` BIGINT NOT NULL,
  `projectId` BIGINT NOT NULL,
  `developerName` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`issueId`, `projectId`, `developerName`),
  CONSTRAINT `cclist_issueId_projectId`
    FOREIGN KEY (`issueId` , `projectId`)
    REFERENCES `codeface`.`issue_data` (`issueId` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `cclist_issueId_projectId_idx` ON `codeface`.`issue_cclist` (`issueId` ASC, `projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_comment` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_comment` (
  `commentId` BIGINT NOT NULL,
  `projectId` BIGINT NOT NULL,
  `issueId` BIGINT NOT NULL,
  `author` VARCHAR(255) NOT NULL,
  `time` DATETIME NOT NULL,
  `rawText` LONGTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`commentId`, `projectId`, `issueId`),
  CONSTRAINT `comment_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`issue_project` (`projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `comment_issue`
    FOREIGN KEY (`issueId` , `projectId`)
    REFERENCES `codeface`.`issue_data` (`issueId` , `projectId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `comment_issue_idx` ON `codeface`.`issue_comment` (`issueId` ASC, `projectId` ASC);

CREATE INDEX `comment_projectId_idx` ON `codeface`.`issue_comment` (`projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_dependencies`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_dependencies` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_dependencies` (
  `issueId` BIGINT NOT NULL,
  `projectId` BIGINT NOT NULL,
  `relatedIssueId` BIGINT NOT NULL,
  `relationType` VARCHAR(45) NULL,
  PRIMARY KEY (`issueId`, `projectId`, `relatedIssueId`),
  CONSTRAINT `dependencies_issueId`
    FOREIGN KEY (`issueId` , `projectId`)
    REFERENCES `codeface`.`issue_data` (`issueId` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `dependencies_issueId_idx` ON `codeface`.`issue_dependencies` (`issueId` ASC, `projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_history` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_history` (
  `historyId` BIGINT NOT NULL AUTO_INCREMENT,
  `issueId` BIGINT NOT NULL,
  `projectId` BIGINT NOT NULL,
  `who` VARCHAR(255) NOT NULL,
  `time` DATETIME NULL,
  `added` VARCHAR(255) NULL,
  `removed` VARCHAR(255) NULL,
  `attachmentId` BIGINT NULL,
  `fieldName` VARCHAR(255) NULL,
  PRIMARY KEY (`historyId`),
  CONSTRAINT `history_issueId`
    FOREIGN KEY (`issueId` , `projectId`)
    REFERENCES `codeface`.`issue_data` (`issueId` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `history_projectId`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`issue_project` (`projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `history_issueId_idx` ON `codeface`.`issue_history` (`issueId` ASC, `projectId` ASC);

CREATE INDEX `history_projectId_idx` ON `codeface`.`issue_history` (`projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_attachment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_attachment` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_attachment` (
  `attachmentId` BIGINT NOT NULL,
  `projectId` BIGINT NOT NULL,
  `issueId` BIGINT NOT NULL,
  `creator` VARCHAR(255) NOT NULL,
  `creationTime` DATETIME NOT NULL,
  `isObsolete` TINYINT(1) NOT NULL,
  `isPatch` TINYINT(1) NOT NULL,
  `isPrivate` TINYINT(1) NOT NULL,
  `size` BIGINT NOT NULL,
  `positiveReviews` INT NOT NULL,
  PRIMARY KEY (`attachmentId`, `projectId`),
  CONSTRAINT `attachment_issue`
    FOREIGN KEY (`issueId` , `projectId`)
    REFERENCES `codeface`.`issue_data` (`issueId` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `attachment_developer`
    FOREIGN KEY (`creator` , `projectId`)
    REFERENCES `codeface`.`issue_developer` (`name` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `attachment_project`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`issue_project` (`projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `attachment_issue_idx` ON `codeface`.`issue_attachment` (`issueId` ASC, `projectId` ASC);

CREATE INDEX `attachment_developer_idx` ON `codeface`.`issue_attachment` (`creator` ASC, `projectId` ASC);


-- -----------------------------------------------------
-- Table `codeface`.`issue_assignment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `codeface`.`issue_assignment` ;

CREATE TABLE IF NOT EXISTS `codeface`.`issue_assignment` (
  `developerName` VARCHAR(255) NOT NULL,
  `projectId` BIGINT NOT NULL,
  `issueId` BIGINT NOT NULL,
  PRIMARY KEY (`developerName`, `projectId`, `issueId`),
  CONSTRAINT `fk_issue_assignment_1`
    FOREIGN KEY (`projectId`)
    REFERENCES `codeface`.`issue_project` (`projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_issue_assignment_2`
    FOREIGN KEY (`developerName` , `projectId`)
    REFERENCES `codeface`.`issue_developer` (`name` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_issue_assignment_3`
    FOREIGN KEY (`issueId` , `projectId`)
    REFERENCES `codeface`.`issue_data` (`issueId` , `projectId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_issue_assignment_1_idx` ON `codeface`.`issue_assignment` (`projectId` ASC);

CREATE INDEX `fk_issue_assignment_3_idx` ON `codeface`.`issue_assignment` (`issueId` ASC, `projectId` ASC);

USE `codeface` ;

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_bug`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_bug` (`issueId` INT, `projectId` INT, `priority` INT, `priorityValue` INT, `severity` INT, `severityValue` INT, `'numBlockedIssues'` INT, `votes` INT, `'developersInterested'` INT, `'pendingTime'` INT, `component` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_comment` (`'developerName'` INT, `'projectId'` INT, `component` INT, `priority` INT, `isOpen` INT, `'numCommentPosted'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_attachment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_attachment` (`'developerName'` INT, `'projectId'` INT, `component` INT, `priority` INT, `isOpen` INT, `'numAttachmentPosted'` INT, `'positiveReviews'` INT, `'sizeAttachmentPosted'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_issue`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_issue` (`'developerName'` INT, `projectId` INT, `component` INT, `priority` INT, `isOpen` INT, `'issueAssigned'` INT, `'avgTime'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_developer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_developer` (`developerName` INT, `projectId` INT, `component` INT, `priority` INT, `isOpen` INT, `'issueAssigned'` INT, `'avgTime'` INT, `'numCommentPosted'` INT, `'numAttachmentPosted'` INT, `'positiveReviews'` INT, `'sizeAttachmentPosted'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_assignment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_assignment` (`issueId` INT, `projectId` INT, `component` INT, `priority` INT, `severity` INT, `developerName` INT, `isOpen` INT, `positiveReviews` INT, `issueAssigned` INT, `numAttachmentPosted` INT, `numCommentPosted` INT, `sizeAttachmentPosted` INT, `'devAvgTime'` INT, `bugAvgETA` INT);

-- -----------------------------------------------------
-- Placeholder table for view `codeface`.`view_real_check`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codeface`.`view_real_check` (`projectId` INT, `issueId` INT, `developerName` INT);

-- -----------------------------------------------------
-- View `codeface`.`view_bug`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_bug` ;
DROP TABLE IF EXISTS `codeface`.`view_bug`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_bug` AS
SELECT
		i.issueId,
        i.projectId,
        i.priority,
        i.priorityValue,
        i.severity,
        i.severityValue,
        IfNull(b.numBlockedIssues, 0) as 'numBlockedIssues',
        i.votes,
        count(distinct(c.developerName)) as 'developersInterested',
        TIMESTAMPDIFF(MINUTE, i.creationTime, NOW()) as 'pendingTime',
        i.component
FROM
		issue_data i
        LEFT JOIN issue_cclist c ON (i.issueId = c.issueId AND i.projectId = c.projectId)
        LEFT JOIN (SELECT issueId, projectId, count(relatedIssueId) as 'numBlockedIssues' FROM issue_dependencies
				WHERE relationType = "blocks" GROUP BY issueId, projectId) b ON (i.issueId = b.issueId AND i.projectId = b.projectId)
WHERE
		i.isOpen = true
GROUP BY
		i.issueId, i.projectId, i.priority, i.priorityValue, i.severity, i.severityValue, b.numBlockedIssues, i.votes, i.component
ORDER BY
		i.priorityValue asc, i.severityValue asc, b.numBlockedIssues desc, i.votes desc, developersInterested desc, pendingTime desc, i.component asc;

-- -----------------------------------------------------
-- View `codeface`.`view_comment`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_comment` ;
DROP TABLE IF EXISTS `codeface`.`view_comment`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_comment` AS
SELECT
        d.name as 'developerName',
        c.projectId as 'projectId',
        c.component,
        c.priority,
        c.isOpen,
        IfNull(c.commentId, 0) as 'numCommentPosted'
FROM
		issue_developer d JOIN (SELECT i.projectId, i.component, i.priority, i.isOpen, c.author, count(c.commentId) as 'commentId'
				FROM issue_data i JOIN issue_comment c ON (i.issueId = c.issueId AND i.projectId = c.projectId)
                GROUP BY i.projectId, i.component, i.priority, i.isOpen, c.author) c ON (d.name = c.author) -- Comment posted
GROUP BY
		developerName, projectId, c.component, c.priority, c.isOpen;

-- -----------------------------------------------------
-- View `codeface`.`view_attachment`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_attachment` ;
DROP TABLE IF EXISTS `codeface`.`view_attachment`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_attachment` AS
SELECT
        d.name as 'developerName',
        a.projectId as 'projectId',
        a.component,
        a.priority,
        a.isOpen,
        IfNull(a.attachmentId, 0) as 'numAttachmentPosted',
        IfNull(a.positiveReviews, 0) as 'positiveReviews',
        IfNull(a.size, 0) as 'sizeAttachmentPosted'
FROM
		issue_developer d JOIN (SELECT i.projectId, i.component, i.priority, i.isOpen, a.creator, count(a.attachmentId) as 'attachmentId', sum(a.positiveReviews) as 'positiveReviews', sum(a.size) as 'size'
				FROM issue_data i JOIN issue_attachment a ON (i.issueId = a.issueId AND i.projectId = a.projectId)
                GROUP BY i.projectId, i.component, i.priority, i.isOpen, a.creator) a ON (d.name = a.creator) -- Attachment posted
GROUP BY
		developerName, projectId, a.component, a.priority, a.isOpen;

-- -----------------------------------------------------
-- View `codeface`.`view_issue`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_issue` ;
DROP TABLE IF EXISTS `codeface`.`view_issue`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_issue` AS
SELECT
        d.name as 'developerName',
        i.projectId,
        i.component,
        i.priority,
        i.isOpen,
        IfNull(i.issueAssigned, 0) as 'issueAssigned',
        IfNull(i.avgTime, 0) as 'avgTime'
FROM
		issue_developer d JOIN (SELECT i.projectId, i.component, i.priority, i.isOpen, i.assignedTo, count(i.issueId) as 'issueAssigned', floor(avg(i.spentTime)) as 'avgTime'
				FROM issue_data i
                GROUP BY i.projectId, i.component, i.priority, i.isOpen, i.assignedTo) i ON (d.name = i.assignedTo) -- Issue assigned
GROUP BY
		developerName, i.projectId, i.component, i.priority, i.isOpen;

-- -----------------------------------------------------
-- View `codeface`.`view_developer`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_developer` ;
DROP TABLE IF EXISTS `codeface`.`view_developer`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_developer` AS
SELECT r.developerName, r.projectId, r.component, r.priority, r.isOpen, sum(r.issueAssigned) as 'issueAssigned', sum(r.avgTime) as 'avgTime', sum(r.numCommentPosted) as 'numCommentPosted',
		sum(r.numAttachmentPosted) as 'numAttachmentPosted', sum(r.positiveReviews) as 'positiveReviews', sum(r.sizeAttachmentPosted) as 'sizeAttachmentPosted'
FROM
	(	SELECT
				i.developerName as 'developerName',
				i.projectId as 'projectId',
				i.component as 'component',
				i.priority as 'priority',
				i.isOpen as 'isOpen',
                i.issueAssigned as 'issueAssigned',
                i.avgTime as 'avgTime',
				0 as 'numCommentPosted',
				0 as 'numAttachmentPosted',
				0 as 'positiveReviews',
				0 as 'sizeAttachmentPosted'
		FROM
				view_issue i  -- Issue assigned
		GROUP BY
				developerName, projectId, component, priority, isOpen
                
		UNION ALL
        
		SELECT
				a.developerName as 'developerName',
				a.projectId as 'projectId',
				a.component as 'component',
				a.priority as 'priority',
				a.isOpen as 'isOpen',
                0 as 'issueAssigned',
                0 as 'avgTime',
				0 as 'numCommentPosted',
				a.numAttachmentPosted as 'numAttachmentPosted',
				a.positiveReviews as 'positiveReviews',
				a.sizeAttachmentPosted as 'sizeAttachmentPosted'
		FROM
				view_attachment a  -- Attachment posted
		GROUP BY
				developerName, projectId, component, priority, isOpen

		UNION ALL

		SELECT
				c.developerName as 'developerName',
				c.projectId as 'projectId',
				c.component as 'component',
				c.priority as 'priority',
				c.isOpen as 'isOpen',
                0 as 'issueAssigned',
                0 as 'avgTime',
				c.numCommentPosted as 'numCommentPosted',
				0 as 'numAttachmentPosted',
				0 as 'positiveReviews',
				0 as 'sizeAttachmentPosted'
		FROM
				view_comment c -- Comment posted
		GROUP BY
				developerName, projectId, component, priority, isOpen) r
GROUP BY
		r.developerName, r.projectId, r.component, r.priority, r.isOpen;

-- -----------------------------------------------------
-- View `codeface`.`view_assignment`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_assignment` ;
DROP TABLE IF EXISTS `codeface`.`view_assignment`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_assignment` AS

SELECT b.issueId, b.projectId, b.component, b.priority, b.severity, d.developerName, d.isOpen, d.positiveReviews,
		d.issueAssigned, d.numAttachmentPosted, d.numCommentPosted, d.sizeAttachmentPosted, df.avgTime as 'devAvgTime', dr.bugAvgETA
FROM
		view_bug b
        JOIN view_developer d ON (b.projectId = d.projectId AND b.component = d.component AND b.priority = d.priority)
        JOIN view_developer df ON (b.projectId = df.projectId AND b.component = df.component AND b.priority = df.priority AND d.developerName = df.developerName)
        JOIN (SELECT d.projectId, d.component, d.priority, floor(avg(d.avgTime)) as 'bugAvgETA'
				FROM view_developer d WHERE isOpen = 0 GROUP BY d.projectId, d.component, d.priority ) dr ON (b.projectId = dr.projectId AND b.component = dr.component AND b.priority = dr.priority)
WHERE
		df.isOpen = 0 -- Estimated time based on already fixed bugs
        AND df.avgTime > 0 -- Only developers with at least a bug fixed
        -- AND (SELECT floor(avg(ddf.avgTime)) FROM view_developer ddf
			 -- WHERE ddf.projectId = d.projectId AND ddf.component = d.component AND ddf.priority = d.priority) > df.avgTime * d.issueAssigned * d.isOpen -- Only developers with a good resolution time
GROUP BY
		b.issueId, b.projectId, b.component, b.priority, b.severity, d.developerName, d.isOpen, df.avgTime, dr.bugAvgETA
ORDER BY
		b.projectId asc, b.priorityValue asc, b.severityValue asc, b.numBlockedIssues desc, b.votes desc, b.developersInterested desc, b.pendingTime desc, b.component asc, d.isOpen asc,
        d.positiveReviews desc, d.issueAssigned desc, d.numAttachmentPosted desc, d.numCommentPosted desc, d.sizeAttachmentPosted desc, df.avgTime asc, dr.bugAvgETA asc;

-- -----------------------------------------------------
-- View `codeface`.`view_real_check`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `codeface`.`view_real_check` ;
DROP TABLE IF EXISTS `codeface`.`view_real_check`;
USE `codeface`;
CREATE OR REPLACE VIEW `view_real_check` AS
SELECT
		a.projectId, a.issueId, a.developerName
FROM
		issue_assignment a LEFT JOIN issue_data i ON (a.issueId = i.issueId AND
				a.projectId = i.projectId AND a.developerName = i.realAssignee)
WHERE
		i.realAssignee <> NULL
ORDER BY
		a.projectId ASC, a.issueId ASC, a.developerName ASC;
USE `codeface`;

DELIMITER $$

USE `codeface`$$
DROP TRIGGER IF EXISTS `codeface`.`issue_developer_BEFORE_DELETE` $$
USE `codeface`$$
CREATE DEFINER = CURRENT_USER TRIGGER `codeface`.`issue_developer_BEFORE_DELETE` BEFORE DELETE ON `issue_developer` FOR EACH ROW
BEGIN
	UPDATE issue_attachment SET creator = "nobody@mozilla.org" WHERE creator = old.name;
    UPDATE issue_data SET assignedTo = "nobody@mozilla.org" WHERE assignedTo = old.name;
END$$


USE `codeface`$$
DROP TRIGGER IF EXISTS `codeface`.`issue_history_AFTER_INSERT` $$
USE `codeface`$$
CREATE DEFINER = CURRENT_USER TRIGGER `codeface`.`issue_history_AFTER_INSERT` AFTER INSERT ON `issue_history` FOR EACH ROW
BEGIN
	-- Calculate the time spent by the developer to fix the bug
	DECLARE d DATETIME;
    SET d = (SELECT min(h.time)
			 FROM issue_history h JOIN issue_data i ON (h.issueId = i.issueId AND h.projectId = i.projectId)
			 WHERE h.issueId = new.issueId AND h.projectId = new.projectId AND
			 ((h.fieldName = "assigned_to" AND h.added = i.assignedTo) OR (h.attachmentId IS NOT NULL AND h.who = i.assignedTo)));

	IF(d IS NOT NULL) THEN
		-- Calculate the time spent to fix for fixed bugs
		UPDATE issue_data i
		SET spentTime = TIMESTAMPDIFF(MINUTE, d, lastResolved)
		WHERE lastResolved IS NOT NULL AND issueId = new.issueId AND projectId = new.projectId;        
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
